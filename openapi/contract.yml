openapi: 3.0.1
info:
  title: AirCondition Application
  version: "0.1"
paths:
  /users:
    get:
      parameters:
        - in: header
          name: x-token
          required: true
          schema:
            type: string
      tags:
        - UsersEndPoints
      summary: Get all users end point
      description: |
        
        # This End Point Help Admins To Show All Users:
          - This End point only allowed for admins otherwise not allowed to see our user data
          - provide all users data with paggination it will included brief data not sensitive data
      operationId: getUsers
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUserResponse'

        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                errorResponse:
                  $ref: '#/components/examples/GetUsersError404'

        '403':
          description: UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                errorResponse:
                  $ref: '#/components/examples/GetAllUsersError403'

    post:
      tags:
        - UsersEndPoints
      summary: Post User End Point help user to rergister
      description: |
        ### This end ponit will help user To register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      operationId: createUser

      responses:
        '200':
          description: OK Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                errorResponse:
                  $ref: '#/components/examples/PostUsersError400'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                errorResponse:
                  $ref: '#/components/examples/PostUsersError500'

  /users/{id}:

    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer

      - in: header
        name: x-token
        required: true
        schema:
          type: string

    get:
      tags:
        - UsersEndPoints
      operationId: getUser

      responses:
        '200':
          description: OK Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidBody:
                  $ref: '#/components/examples/PostUsersError400'
        '403':
          description: UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UnAuthraized:
                  $ref: '#/components/examples/GetAllUsersError403'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ServerError:
                  $ref: '#/components/examples/PostUsersError500'

    put:
      summary: put end point for update user data
      description: |
        ## This end point help user to update his information so we need to provide two parameters : 
          - User id
          - User token
        
         ## With out those pram it will throw exception
      tags:
        - UsersEndPoints
      operationId: updateUser

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '200':
          description: OK Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '401':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidBody:
                  $ref: '#/components/examples/PostUsersError400'
        '403':
          description: UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UnAuthraized:
                  $ref: '#/components/examples/GetAllUsersError403'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidBody:
                  $ref: '#/components/examples/PostUsersError400'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ServerError:
                  $ref: '#/components/examples/PostUsersError500'

    delete:
      summary: Delete user end point
      description: |
        ## This end point help user to delete his account so we need to provide two parameters : 
          - User id 
          - User token to check credintials
        
         ## With out those pram it will throw exception
      tags:
        - UsersEndPoints
      operationId: deleteUser

      responses:
        '200':
          description: OK Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              examples:
                status:
                  $ref: '#/components/examples/DeleteStatus'

        '401':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidBody:
                  $ref: '#/components/examples/PostUsersError400'
        '403':
          description: UnAuthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UnAuthraized:
                  $ref: '#/components/examples/GetAllUsersError403'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidBody:
                  $ref: '#/components/examples/PostUsersError400'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ServerError:
                  $ref: '#/components/examples/PostUsersError500'


components:
  schemas:
    User:
      properties:
        id:
          type: integer
          format: int32
          example: 50
        givenName:
          type: string
          example: Mohamed
        familyName:
          type: string
          example: Gomaa
        birthDate:
          type: string
          example: "11-12-1997"
        phoneNr:
          type: string
          example: 01068053092

    Address:
      properties:
        streetNr:
          type: string
          example: "12"
        streetName:
          type: string
          example: sharaw street
        houseNr:
          type: string
          example: 5
        city:
          type: string
          example: cairo
        country:
          type: string
          example: Egypt

    GetUserResponse:
      properties:
        user:
          $ref: '#/components/schemas/User'

        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'

    PostUserRequest:
      required:
        - password
        - givenName
        - familyName
        - birthDate
        - streetNr
        - streetName
        - houseNr
        - city
        - country
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/Address'
      properties:
        password:
          type: string
          example: 4545454

    PutUserRequest:
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/Address'
      properties:
        password:
          type: string
          example: 4545454

    StatusResponse:
      properties:
        status:
          type: string
          example: successfully added
        date:
          type: string
          example: "5-12-2023"
        message:
          type: string
          example: Your data successfully updated

    Error:
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        desc:
          type: string



  examples:
    GetAllUsersError401:
      value:
        code: 401
        message: UnAuthanticated
        desc: you're not uthorized to check this kind of data
    GetAllUsersError403:
      value:
        code: 403
        message: UnAuthorized
        desc: you're un uthorized to check this kind of data
    PostUsersError400:
      value:
        code: 400
        message: BadRequest
        desc: invalid data entered please enter correct data
    PostUsersError500:
      value:
        code: 500
        message: ServerError
        desc: We have issue while processing your data
    GetUsersError404:
      value:
        code: 404
        message: NotFound
        desc: There are no user with this id
    DeleteStatus:
      value:
        status: successfully Deleted
        date: "5-12-2023"
        message: Your data successfully Deleted